#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define BASE 0
#define NAV  1
#define NSL  2
#define ADJ  3

&mt {
    /* tapping-term-ms = <170>; */

    quick-tap-ms = <250>;
    /* flavor = "hold-preferred"; */
    /* global-quick-tap; */
};

&lt {
    /* tapping-term-ms = <170>; */
    quick-tap-ms = <250>;
    /* flavor = "tap-preferred"; */
    /* global-quick-tap; */
    require-prior-idle-ms = <250>;
};

&sk { quick-release; };

/ {
    behaviors {
        /*
        *
        */
        caps_tdr: caps_tap_dance_right {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            /* bindings = <&smt RSHFT RALT>, <&caps_word>; */
            bindings = <&sk RALT>, <&caps_word>;
        };

        caps_tdl: caps_tap_dance_left {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&slt 1 LSHFT>, <&caps_word>;
        };

        /*   Custom mod-tap/layer-tap behavior.
        *   The main idea is to accomodate
        *   the one-shot (i.e. sticky) mods.
        */
        slt: sticky_layer_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            require-prior-idle-ms = <250>;
            bindings = <&mo>, <&sk>;
            display-name = "Sticky-Layer-Tap";
        };

        smt: sticky_mod_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            bindings = <&kp>, <&sk>;
            display-name = "Sticky-Mod-Tap";
        };

        /*   CTRL -based behavior of what would normally be a plain SPACE.
        *   Implemented as nested mod-morphs. The main idea is that `space`
        *   and `comma` are among the most commonly typed characters; hence
        *   their optimized placement (again, not without some individual
        *   preferences).
        */
        spc_L1: rctl_space {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&lt 2 SPACE>, <&kp COMMA>;
            mods = <(MOD_RCTL)>;
        };

        spc_L0: lctl_space {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            /* bindings = <&spc_L1>, <&kp COLON>; */
            bindings = <&lt 2 SPACE>, <&kp COLON>;
            mods = <(MOD_LCTL)>;
        };

        /*   Quasi-Shift behavior for certain keys.
        *   In the traditional QWERTY layout/keyboard proper,
        *   pairs of non-alphanumeric symbols seem to be tightly coupled
        *   with one another via Shift Mod Key (e.g. / and ? ).
        *   In ZMK, there could actually be an easier way to decouple them,
        *   and, as such, this schema is also subject to revision.
        */
        s_minus: shift_minus {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp MINUS>, <&kp PLUS>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        s_dot: shift_dot {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp GT>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        s_slash: shift_slash {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp FSLH>, <&kp LT>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        s_quote: shift_quotes {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp APOS>, <&kp DQT>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        ecc: esc_comma_ctl {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&mt LCTRL ESC>, <&kp COMMA>;
            mods = <MOD_RCTL>;
        };

        /*
        *
        *
        */
        mm_ctrl_bspc: ctrl_bspc {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&mt RCTRL BSPC>, <&kp BSPC>;
            mods = <MOD_LCTL>;
            keep-mods = <MOD_LCTL>;
        };

        tap_dance_2_1: tap_dance_2_1 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_2_1";
            #binding-cells = <0>;
            bindings = <&kp LESS_THAN>, <&kp GREATER_THAN>;
        };

        tap_dance_2_2: tap_dance_2_2 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_2_2";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp LESS_THAN>;
        };

        tap_dance_2_3: tap_dance_2_3 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_2_3";
            #binding-cells = <0>;
            bindings = <&kp PERIOD>, <&kp GREATER_THAN>;
        };

        tap_dance_4_1: tap_dance_4_1 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_4_1";
            #binding-cells = <0>;
            bindings = <&kp SINGLE_QUOTE>, <&kp AT_SIGN>;
        };

        tap_dance_4_2: tap_dance_4_2 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_4_2";
            #binding-cells = <0>;
            bindings = <&kp Q>, <&kp RA(Q)>;
        };
    };

    macros {
        /*   Easier navigation macros.  */

        four_down: four_down_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&kp DOWN &kp DOWN &kp DOWN &kp DOWN>;
        };

        four_up: four_up_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&kp UP &kp UP &kp UP &kp UP>;
        };

        eight_down: eight_down_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&kp N8 &kp DOWN>;
        };

        eight_up: eight_up_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&kp N8 &kp UP>;
        };
    };

    /* ---------------------------------------------------------------------------------------------------------------------------------------------------- 
              ┏━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┓   ┏━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┓
              ┃     b     ┃     l     ┃     d     ┃     w     ┃    z      ┃   ┃     "     ┃     f     ┃     o     ┃     u     ┃     j     ┃
              ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫
              ┃     n     ┃     r     ┃     t     ┃     s     ┃    g      ┃   ┃     y     ┃     h     ┃     a     ┃     e     ┃     i     ┃
  ┏━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┓
  ┃   LCTRL   ┃     q     ┃     x     ┃     m     ┃     c     ┃    v      ┃   ┃     k     ┃     p     ┃   - (+)   ┃   . (>)   ┃  / (<)    ┃    RET    ┃
  ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛
                                      ┃           ┃           ┃           ┃   ┃           ┃           ┃           ┃
                                      ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛   ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛
*/
    keymap {
        compatible = "zmk,keymap";
        base_layer {
            label = "BASE";
            bindings = <
           &tap_dance_2_1  &tap_dance_2_2  &tap_dance_2_3  &kp P        &kp Z        &kp F      &kp G          &kp C            &kp R        &kp L
           &kp A           &mt LEFT_GUI O  &mt LEFT_ALT E  &mt LCTRL U  &kp I        &kp D      &mt RCTRL H    &mt RIGHT_ALT T  &mt RMETA N  &kp S
&kp LSHFT  &tap_dance_4_1  &tap_dance_4_2  &kp J           &kp K        &kp X        &kp B      &kp M          &kp W            &kp V        &kp Z  &kp RIGHT_SHIFT
                                           &kp DELETE      &slt 1 TAB   &kp SPACE    &kp ENTER  &slt 2 ESCAPE  &kp BACKSPACE
            >;
        };

        /* ---------------------------------------------------------------------------------------------------------------------------------------------------- */

        nav_layer {
            label = "NAV";
            bindings = <
         &kp KP_NUMBER_7  &kp KP_NUMBER_7  &kp KP_NUMBER_3  &kp KP_NUMBER_1  &kp KP_NUMBER_9    &kp KP_NUMBER_0  &kp KP_NUMBER_2  &kp KP_NUMBER_4  &kp KP_NUMBER_6  &kp KP_NUMBER_8
         &kp F1           &kp F2           &kp F3           &kp F4           &kp F5             &kp LEFT         &kp DOWN         &kp UP           &kp RIGHT        &trans
&kp F11  &kp F6           &kp F7           &kp F8           &kp F9           &kp F10            &kp HOME         &kp PAGE_DOWN    &kp PAGE_UP      &kp END          &trans           &trans
                                           &trans           &trans           &trans             &trans           &trans           &trans
            >;
        };

        /* ---------------------------------------------------------------------------------------------------------------------------------------------------- */

        num_sym_layer {
            label = "NSL";
            bindings = <
        &kp RA(NUMBER_8)       &kp RA(NUMBER_7)  &kp RA(NUMBER_0)  &kp ASTERISK              &kp RIGHT_PARENTHESIS          &kp RIGHT_BRACE  &kp LEFT_PARENTHESIS  &kp RIGHT_BRACKET  &kp RA(NUMBER_9)  &kp EXCLAMATION
        &kp RA(RIGHT_BRACKET)  &kp PERCENT       &kp LS(EQUAL)     &mt UNDERSCORE AMPERSAND  &mt GRAVE RA(Q)                &trans           &trans                &trans             &trans            &trans
&trans  &kp DOLLAR             &kp CARET         &kp POUND         &mt QMARK SLASH           &mt RA(LESS_THAN) RA(MINUS)    &trans           &trans                &trans             &trans            &trans           &trans
                                                 &kp LEFT_GUI      &trans                    &kp SPACE                      &kp ENTER        &trans                &kp LEFT_ALT
            >;
        };

        /* ---------------------------------------------------------------------------------------------------------------------------------------------------- */

        adjust_layer {
            label = "ADJ";
            bindings = <
            &sys_reset    &trans  &trans  &trans  &trans    &trans      &trans  &trans  &trans  &trans
            &bootloader   &trans  &trans  &trans  &trans    &bt BT_NXT  &trans  &trans  &trans  &trans
&bt BT_CLR  &out OUT_TOG  &trans  &trans  &trans  &trans    &bt BT_PRV  &trans  &trans  &trans  &trans  &trans
                                  &trans  &trans  &trans    &trans      &trans  &trans
            >;
        };
    };
};
